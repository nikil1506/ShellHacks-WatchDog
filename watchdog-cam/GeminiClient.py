import google.generativeai as genai
from flask import Flask, request
from flask_cors import CORS
import os
from dotenv import load_dotenv
import json
import requests
import time

load_dotenv()
genai.configure(api_key=os.environ.get("GEMINI_API_KEY"))



safety_settings = [
    {
      "category": "HARM_CATEGORY_HARASSMENT",
      "threshold": "BLOCK_NONE"
    },
    {
      "category": "HARM_CATEGORY_HATE_SPEECH",
      "threshold": "BLOCK_NONE"
    },
    {
      "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
      "threshold": "BLOCK_NONE"
    },
    {
      "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
      "threshold": "BLOCK_NONE"
    },
  ]

def transcribe(name):
    """
    Transcribes the given video file using the Gemini AI model with a detailed prompt.

    Args:
        name (str): The path to the video file.

    Returns:
        str: The response text generated by the model.
    """
    video_file_name = name

    print(f"Uploading file...")
    video_file = genai.upload_file(path=video_file_name)
    print(f"Completed upload: {video_file.uri}")

    while video_file.state.name == "PROCESSING":
        print('Waiting for video to be processed.')
        time.sleep(10)
        video_file = genai.get_file(video_file.name)

    if video_file.state.name == "FAILED":
        raise ValueError(video_file.state.name)
    print(f'Video processing complete: ' + video_file.uri)

    # Enhanced prompt using prompt engineering techniques.
    prompt = (
    "You are an expert video analyst specializing in identifying dangerous activities in video footage. "
    "Your task is to provide a structured and detailed description of the video content. Follow these instructions:\n\n"
    
    "**1. Focus on Dangerous Activities:**\n"
    "- Look for any signs of harm, theft, or assault. Use precise language to describe the events.\n\n"
    
    "**2. Describe the People Involved:**\n"
    "- Specify the number of people in the scene.\n"
    "- Describe their attire, including clothing colors, styles, and any accessories.\n"
    "- Note any recognizable features, such as facial hair, tattoos, or distinctive hairstyles.\n\n"
    
    "**3. Identify Objects of Interest:**\n"
    "- Mention any objects in the scene that could be relevant, such as weapons, bags, or electronic devices.\n"
    "- Describe the interaction between people and objects if applicable.\n\n"
    
    "**4. Use NLP Techniques:**\n"
    "- Analyze the situation accurately and describe the events in clear, concise sentences.\n\n"
    
    "**5. Set the 'Threat level' Flag:**\n"
    "- If a dangerous activity is detected, set 'Threat level' to 1.\n"
    "- If no dangerous activity is detected, set 'Threat level' to 0 and provide a general description like 'Nothing of interest happens in this segment.'\n\n"
    
    "**6. Specify the Event Offset:**\n"
    "- If a threat event is detected, include an 'offset' value that indicates the time (in seconds) from the start of the video when the event occurs.\n\n"
    
    "**7. Follow the Output Format:**\n"
    "Provide your response in the following JSON format:\n"
    """
    {
        "Threat level": "<0/1>",
        "description": "<A description of the event>",
        "offset": <xx>,
        "number_of_people": <number>,
        "attire": "<description of clothing and accessories>",
        "recognizable_features": "<facial hair, tattoos, etc.>",
        "object_of_interest": "<description of relevant objects>"
    }
    """
    "\n\n**Example Outputs:**\n"
    "- **If a dangerous activity is detected:**\n"
    """
    {
        "Threat level": "1",
        "description": "A person is seen engaging in a physical altercation at the 15-second mark, indicating potential assault.",
        "offset": 15,
        "number_of_people": 2,
        "attire": "Person 1 is wearing a red shirt and jeans. Person 2 is wearing a black hoodie and shorts.",
        "recognizable_features": "Person 1 has a beard and a tattoo on the left arm.",
        "object_of_interest": "A backpack is seen on the ground."
    }
    """
    "- **If no dangerous activity is detected:**\n"
    """
    {
        "Threat level": "0",
        "description": "Nothing of interest happens in this segment.",
        "offset": 0,
        "number_of_people": 0,
        "attire": "N/A",
        "recognizable_features": "N/A",
        "object_of_interest": "N/A"
    }
    """
)


    # Set the model to Gemini 1.5 Flash.
    model = genai.GenerativeModel(model_name="models/gemini-1.5-flash")

    # Make the LLM request.
    print("Making LLM inference request...")
    response = model.generate_content([prompt, video_file],
                                      request_options={"timeout": 600},
                                      safety_settings=safety_settings)
    return response.text

# Example usage (uncomment to use):
# response = transcribe("Saved/VID_20240927_224416.mp4")
# print(response)
